let dados = [
    {
        titulo: "Aula 01 - Desvendando a Magia dos Algoritmos",
        descricao: "<b>Objetivo Geral:</b> Introduzir o conceito de algoritmo de forma lúdica e intuitiva, utilizando exemplos do cotidiano para tornar a ideia compreensível e relevante para os alunos.<br><b>Objetivos Específicos:</b> Definir o que é um algoritmo de maneira simples e clara. <i>Identificar</i> a presença de algoritmos em diversas atividades do dia a dia. <i>Compreender</i> que um algoritmo é uma sequência de passos bem definidos para a resolução de um problema. <i>Desenvolver</i> a habilidade de criar algoritmos simples para resolver problemas.<br /><b><u>Introdução:</u></b> Iniciar com uma pergunta provocativa: <i>'Alguém aqui já tentou ensinar um jogo de videogame para um amigo? Como vocês explicaram as regras?</i> Apresentar a história do robô fazendo um sanduíche, incentivando os alunos a descrever os passos necessários. Introduzir o conceito de algoritmo como uma receita ou um conjunto de instruções precisas para realizar uma tarefa.<br /><b><u>Desenvolvimento:</u></b><i> Exemplos do dia a dia:</i> Fazer uma ligação telefônica, buscar uma informação na internet, preparar um bolo, resolver uma equação matemática ou cruzar a rua.<br /><b><u>Características de um algoritmo:</u></b> <u>Sequência de passos:</u> Os passos devem ser executados em uma ordem específica. <u>Clareza:</u> Cada passo deve ser claro e conciso. <u>Finitude:</u> O algoritmo deve terminar em algum momento. <u>Eficiência:</u> O algoritmo deve resolver o problema de forma eficiente. <u>Atividades:</u> Dividir a turma em grupos e pedir para cada grupo criar um algoritmo para uma tarefa simples, como escovar os dentes ou arrumar a cama. Apresentar os algoritmos criados pelos grupos e discutir as diferenças e semelhanças. Utilizar um software de programação visual (como Scratch) para criar um algoritmo simples, como um desenho animado.<br /><b>Conclusão:</b> Reforçar a ideia de que os algoritmos estão presentes em todos os lugares e que são fundamentais para o funcionamento de computadores e outras tecnologias. Destacar a importância de aprender a pensar de forma algorítmica para resolver problemas de forma eficiente.<br /> <b>Recursos Utilizados:</b> Quadro branco ou lousa. Canetas coloridas ou giz. Computadores com acesso à internet (opcional). Software de programação visual (opcional). Cartolina e materiais para criar cartazes (opcional).<br /><b>Avaliação Participativa:</b> Observar a participação dos alunos nas discussões e atividades.<br /><b>Produção:</b> Analisar os algoritmos criados pelos alunos e os cartazes (se utilizados).<br /><b>Questionário:</b> Aplicar um breve questionário para verificar a compreensão dos alunos sobre o conceito de algoritmo.<br /> <b>Tempo estimado:</b> <br />Introdução: 10 minutos. <br />Desenvolvimento: 35 minutos. <br />Conclusão: 10 minutos. <br /><b>Adaptações:</b> Para alunos mais jovens: Utilizar exemplos mais simples e concretos, como montar um quebra-cabeça ou seguir um mapa. Para alunos mais velhos: Introduzir conceitos mais avançados, como a complexidade de algoritmos e a análise de algoritmos.",
        link: "https://scratch.mit.edu/",
        tags: "Algorítmos Escola Crianças"
    },
    {
        titulo: "Aula 02 - Crie seu Próprio Mundo Virtual",
        descricao: "<b>Objetivo Geral:</b> Introduzir os conceitos básicos de criação de mundos virtuais e estimular a criatividade doalunos,utilizando ferramentas de programação visual.<br><b>Objetivos Específicos:</b> <i>Compreender</i> os elementos básicos num mundo virtual(cenário, personagens, interações). <i>Desenvolver</i> a habilidade de criar cenários e personagens simpleutilizando ferramentas deprogramação visual. <i>Experimentar</i> com diferentes elementos e interações para construir um mundvirtual personalizado.<br ><b><u>Introdução:</u></b> Apresentar exemplos de jogos e animações, incentivando os alunos a imaginaseus próprios mundos virtuais.Introduzir a ideia de que a programação permite dar vida a essas ideias.<br><b><u>Desenvolvimento:</u></b><i> Construindo o cenário:</i>Utilizar um software de criação de jogos (como Scratch) parconstruir um cenário simples, escolhendo o fundo, objetos e elementosvisuais. <i>Criando personagens:</i> Desenhar ou escolhepersonagens pré-definidos e programar seus movimentos e interações com ocenário. <i>Adicionando interações:</i> Criar eventos ações que façam o mundo virtual reagir às ações do usuário. <i>Exemplo prático:</i> Criar um jogo simples, como um labirinto ou umplataforma.<br /><b><u>Conclusão:</u></b> Destacar a importância da programação para acriação de mundos virtuais e jogosIncentivar os alunos a continuarem explorando as possibilidades das ferramentas utilizadas.<br ><b>Recursos Utilizados:</b>Computadores com acesso à internet. Software de criação de jogos (Scratch). Projetor ou tela parademonstração.<br /><b>Avaliação:</b> Analisar os projetos criados pelos alunos, observando a originalidade, a complexidade e a utilizaçãodos conceitos aprendido<br /><b>Produção:</b> Os alunos apresentarão seus projetos para a turma.<br /><b>Tempo estimado:</b> Introdução:10 minutosDesenvolvimento: 40 minutos. Conclusão: 10 minutos.<br /><b>Adaptações:</b> Para alunos mais jovens: Utilizar ferramentasmaisimples e com interfaces mais intuitivas. Para alunos mais velhos: Introduzir conceitos mais avançados de programação de jogoscomofísica e inteligência artificial.<br />",
        link: "https://scratch.mit.edu/",
        tags: "Programação Jogos Criatividade Mundo Virtual"
    } ,
    {
        titulo: "Aula 03 - Desvendando o Mundo das Variáveis",
        descricao: "<b>Objetivo Geral:</b> Introduzir o conceito de variável e os diferentes tipos de dados utilizados em programação.<br><b>Objetivos Específicos:</b> Definir o que é uma variável e qual sua função em um programa. <i>Identificar</i> os diferentes tipos de dados (números, texto, booleanos). <i>Compreender</i> como declarar e atribuir valores a variáveis. <i>Utilizar</i> variáveis em simples expressões matemáticas.<br><b><u>Introdução:</u></b> Utilizar a analogia de uma caixa para representar uma variável. Explicar que uma variável pode armazenar diferentes tipos de informações.<br><b><u>Desenvolvimento:</u></b><i> Tipos de dados:</i> Números (inteiros e decimais), texto (strings), booleanos (verdadeiro ou falso). <i>Operações com variáveis:</i> Soma, subtração, multiplicação, divisão. <i>Exemplos práticos:</i> Calcular a área de um retângulo, criar uma mensagem de boas-vindas personalizada.<br><b><u>Atividades:</u></b> Criar um programa simples em Scratch para calcular a idade de uma pessoa. Utilizar diferentes tipos de dados em um programa. Resolver desafios de lógica envolvendo variáveis.<br><b>Conclusão:</b> Reforçar a importância das variáveis para a criação de programas mais dinâmicos e flexíveis.<br><b>Recursos Utilizados:</b> Computadores com acesso à internet, Scratch.<br><b>Avaliação:</b> Observar a participação dos alunos nas atividades e analisar os programas criados.<br><b>Tempo estimado:</b> 45 minutos.<br><b>Adaptações:</b> Para alunos mais jovens: Utilizar exemplos mais concretos, como contar objetos. Para alunos mais velhos: Introduzir conceitos de escopo de variáveis e tipos de dados mais complexos.<br>",
        link: "https://scratch.mit.edu/",
        tags: "Variáveis, Tipos de Dados, Programação, Scratch"
    },
    {
        titulo: "Aula 04 - Fazendo Escolhas e Repetindo Ações",
        descricao: "<b>Objetivo Geral:</b> Introduzir os conceitos de condicionais e estruturas de repetição.<br><b>Objetivos Específicos:</b> Definir o que são condicionais e estruturas de repetição. <i>Identificar</i> quando utilizar cada estrutura. <i>Utilizar</i> as estruturas if/else e while/for em programas simples.<br><b><u>Introdução:</u></b> Utilizar a analogia de um semáforo para explicar o conceito de condicional. Explicar que as estruturas de repetição permitem executar um bloco de código várias vezes.<br><b><u>Desenvolvimento:</u></b><i> Condicionais:</i> If/else, operadores de comparação. <i>Estruturas de repetição:</i> While, for. <i>Exemplos práticos:</i> Criar um programa que verifica se um número é par ou ímpar. Criar um programa que desenha um quadrado.<br><b><u>Atividades:</u></b> Resolver desafios de lógica utilizando condicionais e estruturas de repetição. Criar um jogo simples em Scratch que utilize essas estruturas.<br><b>Conclusão:</b> Reforçar a importância das condicionais e estruturas de repetição para a criação de programas mais complexos e interativos.<br><b>Recursos Utilizados:</b> Computadores com acesso à internet, Scratch.<br><b>Avaliação:</b> Observar a participação dos alunos nas atividades e analisar os jogos criados.<br><b>Tempo estimado:</b> 45 minutos.<br><b>Adaptações:</b> Para alunos mais jovens: Utilizar exemplos mais simples, como jogos de adivinhação. Para alunos mais velhos: Introduzir conceitos de loops aninhados e funções.<br>",
        link: "https://scratch.mit.edu/",
        tags: "Condicionais, Estruturas de Repetição, Programação, Scratch"
    },
    
    {
        titulo: "Aula 05 - Estruturas de Controle: Se e Senão",
        descricao: "<b>Objetivo Geral:</b> Introduzir o conceito de estruturas de controle 'se' e 'senão', demonstrando como elas permitem tomar decisões em um algoritmo.<br><b>Objetivos Específicos:</b> <i>Definir</i> as estruturas de controle 'se' e 'senão'. <i>Identificar</i> situações do dia a dia onde são tomadas decisões. <i>Escrever</i> pequenos algoritmos utilizando essas estruturas. <i>Compreender</i> a importância das estruturas de controle para a lógica de programação.<br><b><u>Introdução:</u></b> Começar com uma pergunta: <i>'O que vocês fazem quando estão na frente de um semáforo vermelho?'</i>. Relacionar a ação de tomar uma decisão com o conceito de estruturas de controle em programação.<br><b><u>Desenvolvimento:</u></b> <i>Explicação das estruturas:</i> Utilizar diagramas de fluxos para visualizar como as estruturas 'se' e 'senão' funcionam. Apresentar exemplos simples em linguagem natural, como: 'Se estiver chovendo, levo um guarda-chuva. Senão, saio sem guarda-chuva'.<br><i>Exercícios práticos:</i> Propor exercícios simples para os alunos resolverem utilizando as estruturas de controle. Exemplos: verificar se um número é par ou ímpar, determinar se um aluno foi aprovado ou reprovado, etc.<br><b><u>Atividades:</u></b> Dividir a turma em grupos e propor desafios mais complexos, como criar um algoritmo para um jogo simples com decisões (ex: pedra, papel, tesoura). Utilizar um software de programação visual (como Scratch) para implementar os algoritmos.<br><b>Conclusão:</b> Reforçar a importância das estruturas de controle para a criação de programas mais complexos e inteligentes. Discutir como as decisões tomadas por um programa podem afetar o resultado final.<br><b>Recursos Utilizados:</b> Quadro branco ou lousa. Canetas coloridas ou giz. Computadores com acesso à internet. Software de programação visual (Scratch).<br><b>Avaliação Participativa:</b> Observar a participação dos alunos nas discussões e atividades.<br><b>Produção:</b> Analisar os algoritmos criados pelos alunos.<br><b>Questionário:</b> Aplicar um breve questionário para verificar a compreensão dos alunos sobre as estruturas de controle.<br><b>Tempo estimado:</b> <br />Introdução: 10 minutos. <br />Desenvolvimento: 35 minutos. <br />Conclusão: 10 minutos.<br><b>Adaptações:</b> Para alunos com mais dificuldade, utilizar exemplos mais concretos e simplificar os exercícios. Para alunos mais avançados, introduzir conceitos como operadores lógicos e estruturas de controle aninhadas.<br>",
        link: "https://scratch.mit.edu/",
        tags: "Se, Senão, Estruturas de Controle, Scratch"
    },
];